{"version":3,"sources":["components/TextDisplay.js","lib/wordBank.js","lib/wordOperations.js","lib/score.js","lib/timer.js","components/ScoreDisplay.js","components/AppHeader.js","App.js","serviceWorker.js","index.js"],"names":["TextDisplay","props","className","words","map","word","id","state","key","value","wordStates","evaluateTypedWords","displayedWords","typedWords","i","wordObj","length","speed","noOfRounds","highestSpeed","lowestSpeed","calculateScore","wordObjs","timeTaken","calculateSpeed","accuracy","calculateAccuracy","hightestSpeed","noOfWords","sec","newSpeed","Math","round","avgSpeed","filter","obj","startTime","stopTimer","durationInMs","Date","now","console","info","ScoreDisplay","score","resetCallback","type","onClick","AppHeader","toggleThemeChange","checked","localStorage","setItem","document","getElementsByTagName","setAttribute","getItem","setState","theme","this","href","data-color-scheme","data-icon","data-size","data-show-count","aria-label","onChange","React","Component","App","handleInput","e","timerStarted","inputWords","target","split","ele","randomWords","isComplete","reset","typedText","onNumberOfWordsChange","newNumber","parseInt","numberOfWords","bind","freshState","handleResetScore","wordsToDisplay","arr","push","floor","random","getRandomWords","hidden","min","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa115c47.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/TextDisplay.css'\n\nexport default function TextDisplay(props) {\n    return (\n        <div className=\"words-holder\">\n            {props.words.map((word, id) => \n                <span \n                className={\"word word-\" + word.state} \n                key={id}\n                >{word.value}</span>\n            )} \n        </div>\n    )\n}\n","export const words = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"dusty\",\"spade\",\"flowers\",\"competition\",\"selfish\",\"fallacious\",\"brainy\",\"hum\",\"special\",\"frequent\",\"bite\",\"taste\",\"religion\",\"unbecoming\",\"festive\",\"illustrious\",\"jaded\",\"private\",\"lunchroom\",\"imagine\",\"beg\",\"zesty\",\"calendar\",\"puny\",\"violet\",\"stretch\",\"cloistered\",\"minister\",\"frame\",\"office\",\"four\",\"switch\",\"grain\",\"try\",\"true\",\"practise\",\"snails\",\"round\",\"quiet\",\"fetch\",\"flowery\",\"wrestle\",\"faded\",\"camera\",\"crowded\",\"quiver\",\"snobbish\",\"introduce\",\"squeak\",\"diligent\",\"feigned\",\"unit\",\"refuse\",\"sidewalk\",\"pass\",\"rub\",\"domineering\",\"bore\",\"six\",\"scarecrow\",\"purring\",\"flagrant\",\"breath\",\"laughable\",\"divide\",\"choke\",\"voice\",\"panicky\",\"year\",\"earsplitting\",\"unknown\",\"division\",\"visit\",\"complain\",\"sassy\",\"bone\",\"heartbreaking\",\"delirious\",\"supply\",\"oval\",\"ordinary\",\"homely\",\"tedious\",\"therapeutic\",\"dry\",\"cat\",\"guess\",\"rule\",\"worry\",\"blush\",\"willing\",\"ultra\",\"vivacious\",\"gigantic\",\"repair\",\"form\",\"cave\",\"road\",\"expect\",\"spotty\",\"act\",\"hurry\",\"bells\",\"saw\",\"crabby\",\"signal\",\"lumpy\",\"cherries\",\"erect\",\"dogs\",\"cheat\",\"blue-eyed\",\"treatment\",\"precious\",\"elbow\",\"abrupt\",\"curtain\",\"hapless\",\"overt\",\"nut\",\"babies\",\"lovely\",\"discovery\",\"goofy\",\"pricey\",\"combative\",\"zoom\",\"argue\",\"hellish\",\"useless\",\"incompetent\",\"design\",\"dare\",\"strap\",\"versed\",\"elegant\",\"glossy\",\"sneeze\",\"territory\",\"save\",\"three\",\"defiant\",\"third\",\"feeling\",\"detect\",\"spare\",\"boundless\",\"exuberant\",\"drum\",\"approve\",\"berserk\",\"geese\",\"subdued\",\"rot\",\"insidious\",\"shave\",\"reason\",\"ice\",\"pen\",\"untidy\",\"tease\",\"omniscient\",\"history\",\"dead\",\"nimble\",\"thumb\",\"smart\",\"badge\",\"macabre\",\"swift\",\"magical\",\"screeching\",\"analyse\",\"kaput\",\"talented\",\"shiny\",\"successful\",\"hobbies\",\"humor\",\"flower\",\"frightening\",\"scare\",\"kindhearted\",\"charming\",\"unequaled\",\"moor\",\"gleaming\",\"sense\",\"substance\",\"funny\",\"knowledgeable\",\"sharp\",\"accidental\",\"wing\",\"grade\",\"sun\",\"ink\",\"tame\",\"shaky\",\"efficient\",\"educated\",\"plane\",\"madly\",\"crush\",\"tough\",\"awful\",\"table\",\"whispering\",\"acoustics\",\"boy\",\"naughty\",\"crooked\",\"smile\",\"nutritious\",\"horn\",\"terrify\",\"pollution\",\"selection\",\"ignorant\",\"disturbed\",\"cumbersome\",\"sparkling\",\"royal\",\"blind\",\"linen\",\"uppity\",\"aware\",\"mighty\",\"bad\",\"bright\",\"used\",\"suit\",\"punish\",\"check\",\"sore\",\"mourn\",\"minor\",\"long\",\"sock\",\"longing\",\"health\",\"squirrel\",\"oceanic\",\"plant\",\"lopsided\",\"wholesale\",\"call\",\"limping\",\"support\",\"tow\",\"itchy\",\"wide\",\"comfortable\",\"lewd\",\"death\",\"mean\",\"school\",\"pets\",\"typical\",\"legs\",\"thaw\",\"wiry\",\"symptomatic\",\"offend\",\"ad-hoc\",\"occur\",\"post\",\"wipe\",\"scared\",\"phobic\",\"disastrous\",\"shop\",\"guard\",\"likeable\",\"massive\",\"uninterested\",\"bashful\",\"pin\",\"battle\",\"clumsy\",\"whisper\",\"committee\",\"capable\",\"difficult\",\"hunt\",\"grouchy\",\"dad\",\"second\",\"rob\",\"like\",\"tranquil\",\"horses\",\"wealth\",\"defective\",\"curly\",\"eager\",\"ahead\",\"spoil\",\"attack\",\"approva\"];","import { words } from './wordBank'\n\nexport const wordStates = {\n    CORRECT: \"correct\",\n    WRONG: \"wrong\",\n    INACTIVE: \"inactive\",\n}\n\n// Returns a string with random words \nexport const getRandomWords = (length) => {\n    let arr = [];\n    while (length--) { \n        arr.push(words[Math.floor(Math.random() * words.length)])\n    }\n    return arr\n}\n\nexport const evaluateTypedWords = (displayedWords, typedWords) => displayedWords.map((word, i) => {\n    let wordObj = {value: word, state: null}\n    if (i < typedWords.length) {\n        wordObj.state = typedWords[i] === word ?\n            wordStates.CORRECT : wordStates.WRONG\n        return wordObj\n    }\n    wordObj.state = wordStates.INACTIVE\n    return wordObj\n})\n\nexport const breakText = (text) => text.split(' ').filter(ele => ele !== '');","import { wordStates } from \"./wordOperations\";\n\nvar speed = 0;\nvar noOfRounds = 0;\nvar highestSpeed = 0;\nvar lowestSpeed = 99999;\n\nexport const calculateScore = (wordObjs, timeTaken) => {\n    let speed = calculateSpeed(wordObjs.length, timeTaken)\n    let accu = calculateAccuracy(wordObjs)\n    return {\n        speed: speed,\n        accuracy: accu,\n        hightestSpeed: highestSpeed,\n        lowestSpeed: lowestSpeed,\n        noOfRounds: ++noOfRounds,\n    }\n}\n\nexport const resetScore = () => {\n    speed = 0\n    noOfRounds = 0\n    highestSpeed = 0\n    lowestSpeed = 99999\n}\n\nconst calculateSpeed = (noOfWords, sec) => {\n    let newSpeed = Math.round((noOfWords/sec)*60)\n    let avgSpeed = speed === 0 ? newSpeed : Math.round((speed + newSpeed)/2)\n    speed = avgSpeed\n    highestSpeed = newSpeed > highestSpeed ? newSpeed : highestSpeed\n    lowestSpeed = newSpeed < lowestSpeed ? newSpeed : lowestSpeed\n    return avgSpeed\n}\n\nconst calculateAccuracy = (wordObjs) => 100 * (\n    wordObjs.filter(obj => obj.state === wordStates.CORRECT).length / wordObjs.length\n)\n","var startTime = 0;\n\nexport const startTimer = () => {\n    startTime = Date.now()\n    console.info(\"started time\")\n}\n\nexport const stopTimer = () => {\n    let durationInMs = Date.now() - startTime\n    startTime = 0\n    console.info(\"stopped time\")\n    return durationInMs/1000\n}","import React from 'react';\n\nexport default function ScoreDisplay({score, resetCallback}) {\n    return (\n        <div className=\"wpmReset\">\n            <span className=\"score\">Average Speed: {score.speed || 0} wpm</span>\n            <span className=\"score\">Accuracy: {score.accuracy || 0}%</span>\n            <span className=\"score\">Highest speed: {score.hightestSpeed || 0} wpm</span>\n            <span className=\"score\">Lowest speed: {score.lowestSpeed || 0} wpm</span>\n            <span className=\"score\">Rounds: {score.noOfRounds || 0}</span>\n            <input className=\"reset-score\" type=\"submit\" onClick={resetCallback} value=\"reset\" />\n        </div>\n    )\n}","import React from 'react';\nimport GitHubButton from \"react-github-btn\"\n\nexport default class AppHeader extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: true,\n            theme: localStorage.getItem(\"theme\") || \"dark\",\n        }\n    }\n\n    componentDidMount() {\n        document\n        .getElementsByTagName(\"HTML\")[0]\n        .setAttribute(\"data-theme\", this.state.theme);\n    }\n\n    toggleThemeChange = () => {\n        const { checked } = this.state;\n        // If theme is light then change to dark\n        if (!checked) {\n        // Update localstorage\n        localStorage.setItem(\"theme\", \"dark\");\n        /**\n         * The document.getElementsByTagName(...).setAttribute(...)\n         * will only update the value\n         */\n        // Update the data-theme attribute of our html tag\n        document\n            .getElementsByTagName(\"HTML\")[0]\n            .setAttribute(\"data-theme\", localStorage.getItem(\"theme\"));\n        // Update our state\n        this.setState({\n            // Ensure our switch is on if we change to dark theme\n            checked: true\n        });\n        } else {\n        // Update localstorage\n        localStorage.setItem(\"theme\", \"light\");\n        /**\n         * The document.getElementsByTagName(...).setAttribute(...)\n         * will only update the value until the App is mounted and we change\n         * the state of the switch so we will need to introduce\n         * a React lifecycle called ˝componentDidMount()˝\n         */\n        // Update the data-theme attribute of our html tag\n        document\n            .getElementsByTagName(\"HTML\")[0]\n            .setAttribute(\"data-theme\", localStorage.getItem(\"theme\"));\n        // Update our state\n        this.setState({\n            // Ensure our switch is off if we change to light theme\n            checked: false\n        });\n        }\n    };\n\n    render() {\n        return (\n            <>\n                <div className=\"gitBtn\">\n                <GitHubButton href=\"https://github.com/arjunmahishi/type-test\" \n                data-color-scheme=\"no-preference: light; light: light; dark: dark;\" \n                data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\" \n                aria-label=\"Star arjunmahishi/type-test on GitHub\">Star</GitHubButton>\n                </div>\n                <label className=\"switch\">\n                <input\n                    type=\"checkbox\"\n                    checked={this.state.checked}\n                    onChange={this.toggleThemeChange}\n                />\n                <span className=\"slider round\" />\n                </label>\n                <h1 className=\"appName\">type-test</h1>\n            </>\n        )\n    }\n}","import React from 'react';\nimport TextDisplay from './components/TextDisplay'\nimport './css/App.css'\nimport { calculateScore, resetScore } from \"./lib/score\"\nimport { startTimer, stopTimer } from \"./lib/timer\"\nimport { breakText, evaluateTypedWords, getRandomWords, wordStates } from './lib/wordOperations';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport AppHeader from './components/AppHeader';\n\nconst defaultNumberOfWords = 5\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = this.freshState()\n    this.timerStarted = false\n  }\n\n  handleInput = (e) => {\n    if (!this.timerStarted) {\n      startTimer()\n    }\n    this.timerStarted = true\n\n    let inputWords = breakText(e.target.value)\n    let wordObjs = evaluateTypedWords(this.state.randomWords, inputWords)\n\n    // check if the round is complete\n    if (this.isComplete(wordObjs, inputWords)) {\n      this.reset(wordObjs)\n      this.setState({\n        score: calculateScore(wordObjs, stopTimer())\n      })\n      return\n    }\n\n    // if not, update the state\n    this.setState({\n      typedText: e.target.value,\n      wordObjs: wordObjs,\n    })\n  }\n\n  onNumberOfWordsChange = (e) => {\n    const newNumber = parseInt(e.target.value)\n    if (newNumber > 0) {\n      this.setState(\n        {\n          numberOfWords: newNumber,\n        },\n        this.reset.bind(this),\n      )\n    }\n  }\n\n  reset = () => {\n    let state = this.freshState()\n    this.setState(state)\n    this.timerStarted = false\n  }\n\n  handleResetScore = () =>{\n    this.setState({\n      score: this.freshState().score,\n    })\n    resetScore()\n  }\n\n  isComplete = (wordsToDisplay, inputWords) => inputWords.length > this.state.randomWords.length || \n    wordsToDisplay[wordsToDisplay.length-1].state === wordStates.CORRECT\n\n  freshState = () => {\n    const numberOfWords = this.state && this.state.numberOfWords\n      ? this.state.numberOfWords\n      : defaultNumberOfWords\n    const randomWords = getRandomWords(numberOfWords)\n    return {\n      typedText: \"\",\n      score: {speed: 0, accuracy: 0},\n      numberOfWords,\n      randomWords: randomWords,\n      wordObjs: evaluateTypedWords(randomWords, []),\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <AppHeader />\n        <div className=\"App\">\n          <ScoreDisplay score={this.state.score} resetCallback={this.handleResetScore}/>\n          <div hidden className=\"word-amount\">\n            <label>\n              Number of words\n              <input value={this.state.numberOfWords}\n                type=\"number\"\n                min=\"1\"\n                onChange={this.onNumberOfWordsChange}\n              />\n            </label>\n          </div>\n          <TextDisplay words={this.state.wordObjs} />\n          <input value={this.state.typedText}\n            id=\"text-input\"\n            className=\"text-input\"\n            onChange={this.handleInput}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}