{"version":3,"sources":["components/app/TextDisplay.tsx","lib/wordBank.js","lib/wordOperations.js","lib/score.js","lib/timer.js","components/app/ScoreDisplay.tsx","components/app/AppHeader.tsx","components/app/App.tsx","serviceWorker.js","index.js"],"names":["TextDisplay","words","className","map","letter","id","state","value","key","wordStates","evaluateTypedWords","displayedWords","typedWords","split","word","i","wordObj","length","speed","noOfRounds","highestSpeed","lowestSpeed","speedArr","calculateSpeed","noOfWords","sec","newSpeed","Math","round","avgSpeed","push","calculateAccuracy","wordObjs","filter","obj","startTime","ScoreDisplay","score","resetCallback","accuracy","hightestSpeed","type","onClick","AppHeader","storedTheme","localStorage","theme","useState","checked","setChecked","useEffect","document","querySelector","setAttribute","href","data-color-scheme","data-icon","data-size","data-show-count","aria-label","onChange","setItem","getElementsByTagName","App","initialRandomWords","arr","floor","random","trim","getRandomWords","initialScore","typedText","setTypedText","setScore","randomWords","setRandomWords","setWordObjs","timerStarted","setTimerStarted","initNextRound","timeTaken","calculateScore","durationInMs","Date","now","console","info","stopTimer","isComplete","wordsToDisplay","inputWords","e","target","ele","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9f23470e.chunk.js","sourcesContent":["import React from 'react';\nimport '../../css/TextDisplay.css'\n\nconst TextDisplay = ({ words }: any) => (\n  <div className=\"words-holder\">\n    {\n      words.map((letter: any, id: number) => \n        <span className={\n          \"letter letter-\" + letter.state + (\n            letter.value === \" \" ? \" letter-space\" : \"\"\n          )\n        } key={id}>{letter.value}</span>\n      )\n    } \n  </div>\n)\n\nexport default TextDisplay\n","export const words = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"dusty\",\"spade\",\"flowers\",\"competition\",\"selfish\",\"fallacious\",\"brainy\",\"hum\",\"special\",\"frequent\",\"bite\",\"taste\",\"religion\",\"unbecoming\",\"festive\",\"illustrious\",\"jaded\",\"private\",\"lunchroom\",\"imagine\",\"beg\",\"zesty\",\"calendar\",\"puny\",\"violet\",\"stretch\",\"cloistered\",\"minister\",\"frame\",\"office\",\"four\",\"switch\",\"grain\",\"try\",\"true\",\"practise\",\"snails\",\"round\",\"quiet\",\"fetch\",\"flowery\",\"wrestle\",\"faded\",\"camera\",\"crowded\",\"quiver\",\"snobbish\",\"introduce\",\"squeak\",\"diligent\",\"feigned\",\"unit\",\"refuse\",\"sidewalk\",\"pass\",\"rub\",\"domineering\",\"bore\",\"six\",\"scarecrow\",\"purring\",\"flagrant\",\"breath\",\"laughable\",\"divide\",\"choke\",\"voice\",\"panicky\",\"year\",\"earsplitting\",\"unknown\",\"division\",\"visit\",\"complain\",\"sassy\",\"bone\",\"heartbreaking\",\"delirious\",\"supply\",\"oval\",\"ordinary\",\"homely\",\"tedious\",\"therapeutic\",\"dry\",\"cat\",\"guess\",\"rule\",\"worry\",\"blush\",\"willing\",\"ultra\",\"vivacious\",\"gigantic\",\"repair\",\"form\",\"cave\",\"road\",\"expect\",\"spotty\",\"act\",\"hurry\",\"bells\",\"saw\",\"crabby\",\"signal\",\"lumpy\",\"cherries\",\"erect\",\"dogs\",\"cheat\",\"blue-eyed\",\"treatment\",\"precious\",\"elbow\",\"abrupt\",\"curtain\",\"hapless\",\"overt\",\"nut\",\"babies\",\"lovely\",\"discovery\",\"goofy\",\"pricey\",\"combative\",\"zoom\",\"argue\",\"hellish\",\"useless\",\"incompetent\",\"design\",\"dare\",\"strap\",\"versed\",\"elegant\",\"glossy\",\"sneeze\",\"territory\",\"save\",\"three\",\"defiant\",\"third\",\"feeling\",\"detect\",\"spare\",\"boundless\",\"exuberant\",\"drum\",\"approve\",\"berserk\",\"geese\",\"subdued\",\"rot\",\"insidious\",\"shave\",\"reason\",\"ice\",\"pen\",\"untidy\",\"tease\",\"omniscient\",\"history\",\"dead\",\"nimble\",\"thumb\",\"smart\",\"badge\",\"macabre\",\"swift\",\"magical\",\"screeching\",\"analyse\",\"kaput\",\"talented\",\"shiny\",\"successful\",\"hobbies\",\"humor\",\"flower\",\"frightening\",\"scare\",\"kindhearted\",\"charming\",\"unequaled\",\"moor\",\"gleaming\",\"sense\",\"substance\",\"funny\",\"knowledgeable\",\"sharp\",\"accidental\",\"wing\",\"grade\",\"sun\",\"ink\",\"tame\",\"shaky\",\"efficient\",\"educated\",\"plane\",\"madly\",\"crush\",\"tough\",\"awful\",\"table\",\"whispering\",\"acoustics\",\"boy\",\"naughty\",\"crooked\",\"smile\",\"nutritious\",\"horn\",\"terrify\",\"pollution\",\"selection\",\"ignorant\",\"disturbed\",\"cumbersome\",\"sparkling\",\"royal\",\"blind\",\"linen\",\"uppity\",\"aware\",\"mighty\",\"bad\",\"bright\",\"used\",\"suit\",\"punish\",\"check\",\"sore\",\"mourn\",\"minor\",\"long\",\"sock\",\"longing\",\"health\",\"squirrel\",\"oceanic\",\"plant\",\"lopsided\",\"wholesale\",\"call\",\"limping\",\"support\",\"tow\",\"itchy\",\"wide\",\"comfortable\",\"lewd\",\"death\",\"mean\",\"school\",\"pets\",\"typical\",\"legs\",\"thaw\",\"wiry\",\"symptomatic\",\"offend\",\"ad-hoc\",\"occur\",\"post\",\"wipe\",\"scared\",\"phobic\",\"disastrous\",\"shop\",\"guard\",\"likeable\",\"massive\",\"uninterested\",\"bashful\",\"pin\",\"battle\",\"clumsy\",\"whisper\",\"committee\",\"capable\",\"difficult\",\"hunt\",\"grouchy\",\"dad\",\"second\",\"rob\",\"like\",\"tranquil\",\"horses\",\"wealth\",\"defective\",\"curly\",\"eager\",\"ahead\",\"spoil\",\"attack\",\"approva\"];","import { words } from './wordBank'\n\nexport const wordStates = {\n    CORRECT: \"correct\",\n    WRONG: \"wrong\",\n    INACTIVE: \"inactive\",\n}\n\n// Returns a string with random words \nexport const getRandomWords = (length) => {\n    let arr = \"\";\n    while (length--) { \n        arr += words[Math.floor(Math.random() * words.length)] + \" \"\n    }\n    return arr.trim()\n}\n\nexport const evaluateTypedWords = (displayedWords, typedWords) => displayedWords.split('').map((word, i) => {\n    let wordObj = {value: word, state: null}\n    if (i < typedWords.length) {\n        wordObj.state = typedWords[i] === word ?\n            wordStates.CORRECT : wordStates.WRONG\n        return wordObj\n    }\n    wordObj.state = wordStates.INACTIVE\n    return wordObj\n})\n\nexport const breakText = (text) => text.split('').filter(ele => ele !== '');","import { wordStates } from \"./wordOperations\";\n\nvar speed = 0;\nvar noOfRounds = 0;\nvar highestSpeed = 0;\nvar lowestSpeed = 99999;\nvar speedArr = [];\n\nexport const calculateScore = (wordObjs, timeTaken, noOfWords) => {\n    let speed = calculateSpeed(noOfWords, timeTaken)\n    let accu = calculateAccuracy(wordObjs)\n    return {\n        speed: speed,\n        accuracy: accu,\n        hightestSpeed: highestSpeed,\n        lowestSpeed: lowestSpeed,\n        noOfRounds: ++noOfRounds,\n    }\n}\n\nexport const resetScore = () => {\n    speed = 0\n    noOfRounds = 0\n    highestSpeed = 0\n    lowestSpeed = 99999\n}\n\nexport const getSpeedArr = () => speedArr\n\nexport const calculateSpeed = (noOfWords, sec) => {\n    let newSpeed = Math.round((noOfWords/sec)*60)\n    let avgSpeed = speed === 0 ? newSpeed : Math.round((speed + newSpeed)/2)\n    speed = avgSpeed\n    speedArr.push(newSpeed)\n    highestSpeed = newSpeed > highestSpeed ? newSpeed : highestSpeed\n    lowestSpeed = newSpeed < lowestSpeed ? newSpeed : lowestSpeed\n    return avgSpeed\n}\n\nconst calculateAccuracy = (wordObjs) => Math.round(100 * (\n    wordObjs.filter(obj => obj.state === wordStates.CORRECT).length / wordObjs.length\n))\n","var startTime = 0;\n\nexport const startTimer = () => {\n    startTime = Date.now()\n    console.info(\"started time\")\n}\n\nexport const stopTimer = () => {\n    let durationInMs = Date.now() - startTime\n    startTime = 0\n    console.info(\"stopped time\")\n    return durationInMs/1000\n}","import React from 'react';\n\nconst ScoreDisplay = ({ score, resetCallback }: any) => (\n  <div className=\"wpmReset\">\n    <span className=\"score\">Average Speed: {score.speed || 0} wpm</span>\n    <span className=\"score\">Accuracy: {score.accuracy || 0}%</span>\n    <span className=\"score\">Highest speed: {score.hightestSpeed || 0} wpm</span>\n    <span className=\"score\">Lowest speed: {score.lowestSpeed || 0} wpm</span>\n    <span className=\"score\">Rounds: {score.noOfRounds || 0}</span>\n    <input \n      className=\"reset-score\"\n      type=\"submit\"\n      onClick={resetCallback}\n      value=\"reset\"/>\n  </div>\n)\n\nexport default ScoreDisplay\n","import React, { useState, useEffect } from 'react';\nimport GitHubButton from \"react-github-btn\"\n\nconst AppHeader = () => {\n  const storedTheme = localStorage.theme || \"dark\"\n  const [checked, setChecked] = useState(storedTheme === \"dark\")\n\n  useEffect(() => {\n    document\n      ?.querySelector(\"HTML\")\n      ?.setAttribute(\"data-theme\", storedTheme)\n  }, [storedTheme])\n\n  const toggleTheme = () => {\n    localStorage.setItem(\"theme\", checked ?  \"light\" : \"dark\");\n    document\n      .getElementsByTagName(\"HTML\")[0]\n      .setAttribute(\"data-theme\", checked ? \"light\" : \"dark\")\n    setChecked(!checked)\n  }\n\n  return (\n    <>\n      <div className=\"gitBtn\">\n      <GitHubButton href=\"https://github.com/arjunmahishi/type-test\" \n        data-color-scheme=\"no-preference: light; light: light; dark: dark;\" \n        data-icon=\"octicon-star\" data-size=\"large\" data-show-count={true} \n        aria-label=\"Star arjunmahishi/type-test on GitHub\">Star</GitHubButton>\n      </div>\n      <label className=\"switch\">\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onChange={toggleTheme}/>\n        <span className=\"slider round\" />\n      </label>\n      <h1 className=\"appName\">type-test</h1>\n    </>\n  )\n}\n\nexport default AppHeader\n","import React, { useState } from 'react';\nimport TextDisplay from './TextDisplay'\nimport '../../css/App.css'\nimport { calculateScore, resetScore } from \"../../lib/score\"\nimport { startTimer, stopTimer } from \"../../lib/timer\"\nimport { breakText, evaluateTypedWords, getRandomWords, wordStates } from '../../lib/wordOperations';\nimport ScoreDisplay from './ScoreDisplay';\nimport AppHeader from './AppHeader';\n\nconst numberOfWords = 5\n\nconst App = () => {\n  const initialRandomWords = getRandomWords(numberOfWords) \n  const initialScore = {speed: 0, accuracy: 0} \n\n  const [typedText, setTypedText] = useState(\"\")\n  const [score, setScore] = useState(initialScore)\n  const [randomWords, setRandomWords] = useState(initialRandomWords)\n  const [wordObjs, setWordObjs] = useState(evaluateTypedWords(initialRandomWords, []))\n  const [timerStarted, setTimerStarted] = useState(false)\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!timerStarted) startTimer()\n    setTimerStarted(true)\n\n    const inputWords = breakText(e.target.value)\n    const wordObjs = evaluateTypedWords(randomWords, inputWords)\n\n    // check if the round is complete\n    if (isComplete(wordObjs, inputWords)) {\n      initNextRound(wordObjs)\n      return\n    }\n\n    // if not, update the state\n    setTypedText(e.target.value)\n    setWordObjs(wordObjs)\n  }\n\n  const initNextRound = (wordObjs: any) => {\n    setTypedText(\"\")\n    setRandomWords(initialRandomWords)\n    setWordObjs(evaluateTypedWords(initialRandomWords, []))\n    setScore(calculateScore(wordObjs, stopTimer(), numberOfWords))\n    setTimerStarted(false)\n  }\n\n  const handleResetScore = () =>{\n    setScore(initialScore)\n    resetScore()\n  }\n\n  const isComplete = (wordsToDisplay: any, inputWords: Array<string>) =>\n    inputWords.length > randomWords.length || \n    wordsToDisplay[wordsToDisplay.length-1].state === wordStates.CORRECT\n\n  return (\n    <>\n      <AppHeader />\n      <div className=\"App\">\n        <ScoreDisplay score={score} resetCallback={handleResetScore}/>\n        <TextDisplay words={wordObjs} />\n        <input value={typedText}\n          id=\"text-input\"\n          className=\"text-input\"\n          onChange={handleInput}\n        />\n      </div>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}